'use strict';

exports.__esModule = true;

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

exports.stringifyGETParams = stringifyGETParams;
exports.handleStatus = handleStatus;
exports.handleBody = handleBody;
exports.http = http;
exports.urljoin = urljoin;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (typeof process !== 'undefined') {
    // on node, fetch already exists
    require('isomorphic-fetch');
}

/**
 * API Response promise - resolves with the requested resource
 * @typedef APIResponse
 * @type { Promise }
 */

/**
 * Stringifies query parameters and append them to the url
 * @param  {string} url  - an url
 * @param  {object} data - an object containing the query parameters
 * @return {string}      - the final url
 */
function stringifyGETParams(url, data) {
    var query = '';

    for (var key in (0, _keys2.default)(data)) {
        if (data[key] !== null) {
            query += '&' + encodeURIComponent(key) + '=' + encodeURIComponent(data[key]);
        }
    }
    if (query) {
        url += (~url.indexOf('?') ? '&' : '?') + query.substring(1);
    }
    return url;
}

function handleStatus(response) {
    if (response.status >= 200 && response.status < 300) {
        return response;
    }

    var error = new Error(response.statusText);
    error.response = response;

    throw error;
}

function handleBody(response) {
    if (response.status === 202 || response.status === 204) {
        return _promise2.default.resolve();
    }

    var contentType = response.headers.get('Content-Type') || '';
    var isJson = contentType.indexOf('application/json') > -1;

    return isJson ? response.json() : _promise2.default.resolve();
}

function http(method, url, data) {
    var headers = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

    method = method.toUpperCase();

    var fetchOptions = {
        method: method,
        headers: (0, _assign2.default)({
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }, headers)
    };

    if (data) {
        if (data instanceof FormData) {
            fetchOptions.body = data;
            // Remove the Content-Type header, `fetch` will
            // generate one to add the form boundary.
            delete fetchOptions.headers['Content-Type'];
        } else {
            data = (0, _assign2.default)({}, data);
            if (method === 'GET') {
                url = stringifyGETParams(url, data);
            } else if (method === 'POST' || method === 'PUT') {
                fetchOptions.body = (0, _stringify2.default)(data);
            }
        }
    }

    return fetch(url, fetchOptions).then(handleStatus).then(handleBody);
}

function urljoin() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    return args.map(function (part) {
        return part.replace(/\/$/, '');
    }).join('/');
}