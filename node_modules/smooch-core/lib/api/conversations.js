'use strict';

exports.__esModule = true;
exports.ConversationsApi = undefined;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _base = require('./base');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @typedef Message
 *
 */

/**
 * @class ConversationsApi
 * @extends BaseApi
 */

var ConversationsApi = exports.ConversationsApi = function (_BaseApi) {
    (0, _inherits3.default)(ConversationsApi, _BaseApi);

    function ConversationsApi() {
        (0, _classCallCheck3.default)(this, ConversationsApi);
        return (0, _possibleConstructorReturn3.default)(this, _BaseApi.apply(this, arguments));
    }

    /**
     * Fetch an app user's conversation
     * @param  {string} userId - a user id
     * @return {APIResponse}
     */

    ConversationsApi.prototype.get = function get(userId) {
        var url = this.getFullURL('appUsers', userId, 'conversation');
        return this.request('GET', url);
    };

    /**
     * Post back to an action button
     * @param  {string} userId - a user id
     * @param  {string} actionId - an action id
     * @return {APIResponse}
     */


    ConversationsApi.prototype.postPostback = function postPostback(userId, actionId) {
        if (!actionId) {
            return _promise2.default.reject(new Error('Must provide an action id.'));
        }

        var url = this.getFullURL('appUsers', userId, 'conversation', 'postback');
        var body = {
            actionId: actionId
        };

        return this.request('POST', url, body);
    };

    /**
     * Send a message to an app user's conversation
     * @param  {string} userId - a user id
     * @param  {Message} message - the message to be sent
     * @return {APIResponse}
     */


    ConversationsApi.prototype.sendMessage = function sendMessage(userId, message) {
        var url = this.getFullURL('appUsers', userId, 'conversation', 'messages');
        return this.request('POST', url, message);
    };

    /**
     * Send an image to an app user's conversation
     * @param  {string} userId - a user id
     * @param  {Blob|Readable stream} source - source image
     * @param  {Message} message - the message to be sent
     * @return {APIResponse}
     */


    ConversationsApi.prototype.uploadImage = function uploadImage(userId, source) {
        var message = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

        var url = this.getFullURL('appUsers', userId, 'conversation', 'images');
        var data = new FormData();
        data.append('source', source);

        (0, _keys2.default)(message).forEach(function (key) {
            data.append(key, message[key]);
        });

        return this.request('POST', url, data);
    };

    /**
     * Reset the unread count of the conversation
     * @return {APIResponse}
     */


    ConversationsApi.prototype.resetUnreadCount = function resetUnreadCount(userId) {
        var url = this.getFullURL('appUsers', userId, 'conversation', 'read');
        return this.request('POST', url);
    };

    return ConversationsApi;
}(_base.BaseApi);